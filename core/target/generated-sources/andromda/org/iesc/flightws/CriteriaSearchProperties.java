// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateSearchProperties.vsl in andromda-spring-cartridge.
//
package org.iesc.flightws;

/**
 * Stores the embedded values and asssociations of all entities in the system by type.  
 * Is used to determine the appropriate parameter name when an embedded value's property 
 * is referenced as the attribute to search by (as opposed to an association).
 * 
 * @author Chad Brandon
 */
 public class CriteriaSearchProperties
{
    private static final java.util.Map embeddedValuesByType = new java.util.HashMap();
    private static final java.util.Map embeddedValueNamesByType = new java.util.HashMap();
    private static final java.util.Map navigableAssociationEndsByType = new java.util.HashMap();
    
    static
    {
        initialize1();
        initialize2();
        initialize3();
        initialize4();
        initialize5();
        initialize6();
        initialize7();
        initialize8();
    }
    
    private static final void initialize1()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.FlightImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.FlightImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.FlightImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("departureDates", org.iesc.flightws.domain.FlightDateImpl.class), 
                    new PropertyType("departureCity", org.iesc.flightws.domain.CityImpl.class), 
                    new PropertyType("destinationCity", org.iesc.flightws.domain.CityImpl.class)
                }
            )
        );
    }
    
    private static final void initialize2()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.UserImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.UserImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.UserImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("bookings", org.iesc.flightws.domain.BookingImpl.class)
                }
            )
        );
    }
    
    private static final void initialize3()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.PassengerImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.PassengerImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.PassengerImpl.class,
            null);
    }
    
    private static final void initialize4()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.PlaneImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.PlaneImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.PlaneImpl.class,
            null);
    }
    
    private static final void initialize5()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.CityImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.CityImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.CityImpl.class,
            null);
    }
    
    private static final void initialize6()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.FlightDateImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.FlightDateImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.FlightDateImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("flight", org.iesc.flightws.domain.FlightImpl.class), 
                    new PropertyType("prices", org.iesc.flightws.domain.PriceImpl.class), 
                    new PropertyType("plane", org.iesc.flightws.domain.PlaneImpl.class)
                }
            )
        );
    }
    
    private static final void initialize7()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.PriceImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.PriceImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.PriceImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("flightDate", org.iesc.flightws.domain.FlightDateImpl.class)
                }
            )
        );
    }
    
    private static final void initialize8()
    {
        embeddedValueNamesByType.put(
            org.iesc.flightws.domain.BookingImpl.class,
            null);
        embeddedValuesByType.put(
            org.iesc.flightws.domain.BookingImpl.class,
            null);
        navigableAssociationEndsByType.put(
            org.iesc.flightws.domain.BookingImpl.class,
            java.util.Arrays.asList(
                new PropertyType[] 
                {
                    new PropertyType("user", org.iesc.flightws.domain.UserImpl.class), 
                    new PropertyType("flightDate", org.iesc.flightws.domain.FlightDateImpl.class), 
                    new PropertyType("passengers", org.iesc.flightws.domain.PassengerImpl.class)
                }
            )
        );
    }
    
    /**
     * Attempts to get the embedded value list for the given type (or returns null
     * if one doesn't exist).
     * 
     * @param type the type of which to retrieve the value.
     * @return the collection of embedded value names.
     */
    public static java.util.Collection getEmbeddedValues(final Class type)
    {
        return (java.util.Collection)embeddedValueNamesByType.get(type);
    }
    
    /**
     * Gets the type of the navigable association end given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getNavigableAssociationEndType(final Class ownerType, final String name)
    {
        return getPropertyType(navigableAssociationEndsByType, ownerType, name);
    }
    
    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getEmbeddedValueType(final Class ownerType, final String name)
    {
        return getPropertyType(embeddedValuesByType, ownerType, name);
    }
    
    /**
     * Gets the type of the embedded value given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final java.util.Map properties, final Class ownerType, final String name)
    {
        final java.util.Collection ends = (java.util.Collection)properties.get(ownerType);
        final PropertyType type = (PropertyType)org.apache.commons.collections.CollectionUtils.find(
            ends,
            new org.apache.commons.collections.Predicate()
            {
                public boolean evaluate(final Object object)
                {
                    return ((PropertyType)object).name.equals(name);
                }
            });
        return type != null ? type.type : null;
    }
    
    /**
     * Gets the type of the property given the <code>ownerType</code>
     * and <code>name</code>
     *
     * @param ownerType the owner of the association.
     * @param name the name of the association end to find.
     * @return the type of the association end.
     */
    public static Class getPropertyType(final Class ownerType, final String name)
    {
        Class type = getNavigableAssociationEndType(ownerType, name);
        if (type == null)
        {
            type = getEmbeddedValueType(ownerType, name);
        }
        return type;
    }

    /**
     * A private class storing the name and type.
     */    
    protected static final class PropertyType
    {
        protected PropertyType(final String name, final Class type)
        {
            this.name = name;
            this.type = type;
        }
        protected String name;
        protected Class type;
    }
}