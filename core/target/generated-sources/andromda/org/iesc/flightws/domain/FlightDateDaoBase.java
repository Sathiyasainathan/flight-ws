// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package org.iesc.flightws.domain;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>org.iesc.flightws.domain.FlightDate</code>.
 * </p>
 *
 * @see org.iesc.flightws.domain.FlightDate
 */
public abstract class FlightDateDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements org.iesc.flightws.domain.FlightDateDao
{

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(org.iesc.flightws.domain.FlightDateImpl.class, id);
        return transformEntity(transform, (org.iesc.flightws.domain.FlightDate)entity);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#load(java.lang.Long)
     */
    public org.iesc.flightws.domain.FlightDate load(java.lang.Long id)
    {
        return (org.iesc.flightws.domain.FlightDate)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(org.iesc.flightws.domain.FlightDateImpl.class);
			criteria.setCacheable(true);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(org.iesc.flightws.domain.FlightDate)
     */
    public org.iesc.flightws.domain.FlightDate create(org.iesc.flightws.domain.FlightDate flightDate)
    {
        return (org.iesc.flightws.domain.FlightDate)this.create(TRANSFORM_NONE, flightDate);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(int transform, org.iesc.flightws.domain.FlightDate)
     */
    public java.lang.Object create(final int transform, final org.iesc.flightws.domain.FlightDate flightDate)
    {
        if (flightDate == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.create - 'flightDate' can not be null");
        }
        this.getHibernateTemplate().save(flightDate);
        return this.transformEntity(transform, flightDate);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (org.iesc.flightws.domain.FlightDate)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(java.sql.Timestamp, java.sql.Timestamp)
     */
    public org.iesc.flightws.domain.FlightDate create(
        java.sql.Timestamp departureDate,
        java.sql.Timestamp arrivalDate)
    {
        return (org.iesc.flightws.domain.FlightDate)this.create(TRANSFORM_NONE, departureDate, arrivalDate);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(int, java.sql.Timestamp, java.sql.Timestamp)
     */
    public java.lang.Object create(
        final int transform,
        java.sql.Timestamp departureDate,
        java.sql.Timestamp arrivalDate)
    {
        org.iesc.flightws.domain.FlightDate entity = new org.iesc.flightws.domain.FlightDateImpl();
        entity.setDepartureDate(departureDate);
        entity.setArrivalDate(arrivalDate);
        return this.create(transform, entity);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(java.sql.Timestamp, java.sql.Timestamp, org.iesc.flightws.domain.Plane, org.iesc.flightws.domain.Price)
     */
    public org.iesc.flightws.domain.FlightDate create(
        java.sql.Timestamp arrivalDate,
        java.sql.Timestamp departureDate,
        org.iesc.flightws.domain.Plane plane,
        java.util.Collection prices)
    {
        return (org.iesc.flightws.domain.FlightDate)this.create(TRANSFORM_NONE, arrivalDate, departureDate, plane, prices);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#create(int, java.sql.Timestamp, java.sql.Timestamp, org.iesc.flightws.domain.Plane, org.iesc.flightws.domain.Price)
     */
    public java.lang.Object create(
        final int transform,
        java.sql.Timestamp arrivalDate,
        java.sql.Timestamp departureDate,
        org.iesc.flightws.domain.Plane plane,
        java.util.Collection prices)
    {
        org.iesc.flightws.domain.FlightDate entity = new org.iesc.flightws.domain.FlightDateImpl();
        entity.setArrivalDate(arrivalDate);
        entity.setDepartureDate(departureDate);
        entity.setPlane(plane);
        entity.setPrices(prices);
        return this.create(transform, entity);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#update(org.iesc.flightws.domain.FlightDate)
     */
    public void update(org.iesc.flightws.domain.FlightDate flightDate)
    {
        if (flightDate == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.update - 'flightDate' can not be null");
        }
        this.getHibernateTemplate().update(flightDate);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((org.iesc.flightws.domain.FlightDate)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#remove(org.iesc.flightws.domain.FlightDate)
     */
    public void remove(org.iesc.flightws.domain.FlightDate flightDate)
    {
        if (flightDate == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.remove - 'flightDate' can not be null");
        }
        this.getHibernateTemplate().delete(flightDate);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.remove - 'id' can not be null");
        }
        org.iesc.flightws.domain.FlightDate entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "FlightDate.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>org.iesc.flightws.domain.FlightDateDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link org.iesc.flightws.domain.FlightDateDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final org.iesc.flightws.domain.FlightDate entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,org.iesc.flightws.domain.FlightDate)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>org.iesc.flightws.domain.FlightDateDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,org.iesc.flightws.domain.FlightDate)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link org.iesc.flightws.domain.FlightDate}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof org.iesc.flightws.domain.FlightDate)
                {
                    result = input;
                }
                return result;
            }
        };

    protected org.iesc.flightws.domain.FlightDate toEntity(java.lang.Object[] row)
    {
        org.iesc.flightws.domain.FlightDate target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof org.iesc.flightws.domain.FlightDate)
                {
                    target = (org.iesc.flightws.domain.FlightDate)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return org.iesc.flightws.PrincipalStore.get();
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#search(int, int, int, org.iesc.flightws.Search)
     */
    public org.iesc.flightws.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final org.iesc.flightws.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final org.iesc.flightws.PropertySearch propertySearch = new org.iesc.flightws.PropertySearch(
                this.getSession(false), org.iesc.flightws.domain.FlightDateImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new org.iesc.flightws.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#search(int, int, org.iesc.flightws.Search)
     */
    public org.iesc.flightws.PaginationResult search(final int pageNumber, final int pageSize, final org.iesc.flightws.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#search(int, org.iesc.flightws.Search)
     */
    public java.util.Set search(final int transform, final org.iesc.flightws.Search search)
    {
        try
        {
            final org.iesc.flightws.PropertySearch propertySearch = new org.iesc.flightws.PropertySearch(
                this.getSession(false), org.iesc.flightws.domain.FlightDateImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see org.iesc.flightws.domain.FlightDateDao#search(org.iesc.flightws.Search)
     */
    public java.util.Set search(final org.iesc.flightws.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}